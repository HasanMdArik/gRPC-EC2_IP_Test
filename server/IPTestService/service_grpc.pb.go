// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package IPTestService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IP_TestClient is the client API for IP_Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IP_TestClient interface {
	GetIP(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type iP_TestClient struct {
	cc grpc.ClientConnInterface
}

func NewIP_TestClient(cc grpc.ClientConnInterface) IP_TestClient {
	return &iP_TestClient{cc}
}

func (c *iP_TestClient) GetIP(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/halalwedd.IP_Test/GetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IP_TestServer is the server API for IP_Test service.
// All implementations must embed UnimplementedIP_TestServer
// for forward compatibility
type IP_TestServer interface {
	GetIP(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedIP_TestServer()
}

// UnimplementedIP_TestServer must be embedded to have forward compatible implementations.
type UnimplementedIP_TestServer struct {
}

func (UnimplementedIP_TestServer) GetIP(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (UnimplementedIP_TestServer) mustEmbedUnimplementedIP_TestServer() {}

// UnsafeIP_TestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IP_TestServer will
// result in compilation errors.
type UnsafeIP_TestServer interface {
	mustEmbedUnimplementedIP_TestServer()
}

func RegisterIP_TestServer(s grpc.ServiceRegistrar, srv IP_TestServer) {
	s.RegisterService(&IP_Test_ServiceDesc, srv)
}

func _IP_Test_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IP_TestServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halalwedd.IP_Test/GetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IP_TestServer).GetIP(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// IP_Test_ServiceDesc is the grpc.ServiceDesc for IP_Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IP_Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "halalwedd.IP_Test",
	HandlerType: (*IP_TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIP",
			Handler:    _IP_Test_GetIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
